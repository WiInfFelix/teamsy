// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Division struct {
	ID             string  `json:"id"`
	DivisionName   string  `json:"division_name"`
	Email          string  `json:"email"`
	OrganisationID int     `json:"organisation_id"`
	AdminMembers   []*User `json:"adminMembers"`
}

type Event struct {
	ID        string    `json:"id"`
	Type      EventType `json:"type"`
	EventDate time.Time `json:"eventDate"`
	Location  string    `json:"location"`
}

type NewDivision struct {
	ID string `json:"id"`
}

type NewEvent struct {
	ID string `json:"id"`
}

type NewJoinRequest struct {
	ID     string `json:"id"`
	UserID int    `json:"userId"`
	TeamID int    `json:"teamId"`
}

type NewOrganisation struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

type NewTeam struct {
	ID string `json:"id"`
}

type NewUser struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Birthday string `json:"birthday"`
}

type Organisation struct {
	ID               string  `json:"id"`
	OrganisationName string  `json:"organisation_name"`
	Email            string  `json:"email"`
	AdminMembers     []*User `json:"adminMembers"`
}

type Team struct {
	ID           string   `json:"id"`
	TeamName     string   `json:"teamName"`
	Email        string   `json:"email"`
	Members      []*User  `json:"members"`
	AdminMembers []*User  `json:"adminMembers"`
	Events       []*Event `json:"events"`
}

type User struct {
	ID       string `json:"id"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Birthday string `json:"birthday"`
}

type EventType string

const (
	EventTypeTraining EventType = "TRAINING"
	EventTypeGame     EventType = "GAME"
	EventTypeEvent    EventType = "EVENT"
)

var AllEventType = []EventType{
	EventTypeTraining,
	EventTypeGame,
	EventTypeEvent,
}

func (e EventType) IsValid() bool {
	switch e {
	case EventTypeTraining, EventTypeGame, EventTypeEvent:
		return true
	}
	return false
}

func (e EventType) String() string {
	return string(e)
}

func (e *EventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventType", str)
	}
	return nil
}

func (e EventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
